services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cotai-postgres
    environment:
      POSTGRES_USER: cotai
      POSTGRES_PASSWORD: cotai
      POSTGRES_DB: cotai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cotai -d cotai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cotai-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: cotai
      MONGO_INITDB_ROOT_PASSWORD: cotai
      MONGO_INITDB_DATABASE: cotai
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: cotai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cotai-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cotai-celery-worker
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - mongodb
    command: celery -A app.services.celery worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Task Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cotai-celery-beat
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - mongodb
    command: celery -A app.services.celery beat --loglevel=info
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cotai-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=development
    depends_on:
      - backend

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: cotai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  default:
    name: cotai-network